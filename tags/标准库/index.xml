<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>标准库 on zoulingbin</title>
    <link>https://zoulingbin.github.io/tags/%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <description>Recent content in 标准库 on zoulingbin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jun 2021 00:21:11 +0800</lastBuildDate>
    
	<atom:link href="https://zoulingbin.github.io/tags/%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>context分析</title>
      <link>https://zoulingbin.github.io/post/context/</link>
      <pubDate>Sun, 20 Jun 2021 00:21:11 +0800</pubDate>
      
      <guid>https://zoulingbin.github.io/post/context/</guid>
      <description>什么是Context 上下文（Context）是 Go 语言中非常有特色的一个特性， 在 Go 1.7 版本中正式引入新标准库 context。
其主要的作用是在 goroutine 中进行上下文的传递，而在传递信息中又包含了 goroutine 的运行控制、上下文信息传递等功能。
graph LR A(Context)--&amp;gt;B(WithCancel) B--&amp;gt;F{cancelCtx} A--&amp;gt;C(WithDeadline) C--&amp;gt;G{timeCtx} A--&amp;gt;D(WithTimeout) D--&amp;gt;H{timeCtx} A--&amp;gt;E(WithValue) E--&amp;gt;I{valueCtx} context有以下几种函数：
 WithCancel：基于父级 context，创建一个可以取消的新 context。 WithDeadline：基于父级 context，创建一个具有截止时间（Deadline）的新 context。 WithTimeout：基于父级 context，创建一个具有超时时间（Timeout）的新 context。 Background：创建一个空的 context，一般常用于作为根的父级 context。 TODO：创建一个空的 context，一般用于未确定时的声明使用。 WithValue：基于某个 context 创建并存储对应的上下文信息。  常见用法示例：
func main() { ctx, cancel := context.WithCancel(context.Background()) go func(ctx context.Context) { for { select { case &amp;lt;- ctx.Done(): fmt.Println(&amp;#34;监控退出&amp;#34;) return default: fmt.Println(&amp;#34;监控中&amp;#34;) time.Sleep(2 *time.Second) } } }(ctx) time.</description>
    </item>
    
  </channel>
</rss>