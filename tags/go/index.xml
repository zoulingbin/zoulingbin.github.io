<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - Tag - 邹灵彬的博客</title>
        <link>https://zoulingbin.github.io/tags/go/</link>
        <description>Go - Tag - 邹灵彬的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 03 Aug 2021 00:36:22 &#43;0800</lastBuildDate><atom:link href="https://zoulingbin.github.io/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>net/http标准库</title>
    <link>https://zoulingbin.github.io/posts/nethttp/</link>
    <pubDate>Tue, 03 Aug 2021 00:36:22 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/nethttp/</guid>
    <description><![CDATA[服务端 示例代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  package main import ( &#34;fmt&#34; &#34;log&#34; &#34;net/http&#34; &#34;strings&#34; ) func Hello(w http.ResponseWriter, r *http.Request) { r.ParseForm()	//解析参数，默认不解析 	fmt.Println(r.Form) fmt.Println(&#34;scheme&#34;, r.URL.Scheme) fmt.Println(&#34;path&#34;, r.URL.Path) fmt.Println(r.Form[&#34;url_long&#34;]) for k, v := range r.Form { fmt.Println(&#34;key:&#34;, k) fmt.Println(&#34;val:&#34;, strings.Join(v, &#34;&#34;)) } fmt.Fprintf(w, &#34;hello&#34;)	//输出到客户端 } func main() { http.]]></description>
</item><item>
    <title>WaitGroup的实现</title>
    <link>https://zoulingbin.github.io/posts/waitgroup/</link>
    <pubDate>Sat, 24 Jul 2021 00:36:02 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/waitgroup/</guid>
    <description><![CDATA[WaitGroup的基本用法 WaitGroup提供了三个方法：
1 2 3  func (wg *WaitGroup) Add(delta int) func (wg *WaitGroup) Done() func (wg *WaitGroup) Wait()    Add:用来设置WaitGroup的计数值； Done:用来将WaitGroup的计数值-1，其实就是调用了Add(-1); Wait:调用这个方法的goroutine会一直阻塞，直到WaitGroup的计数值变为0。  ]]></description>
</item><item>
    <title>GMP调度</title>
    <link>https://zoulingbin.github.io/posts/gmp%E8%B0%83%E5%BA%A6/</link>
    <pubDate>Tue, 29 Jun 2021 17:56:43 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/gmp%E8%B0%83%E5%BA%A6/</guid>
    <description><![CDATA[gmp调度分析]]></description>
</item><item>
    <title>Mutex解析</title>
    <link>https://zoulingbin.github.io/posts/mutex/</link>
    <pubDate>Sat, 05 Jun 2021 15:27:17 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/mutex/</guid>
    <description><![CDATA[鸟窝大佬的go并发编程阅读记录，从初版mutex到第四版的源码分析]]></description>
</item><item>
    <title>Context源码分析</title>
    <link>https://zoulingbin.github.io/posts/context/</link>
    <pubDate>Tue, 01 Jun 2021 15:08:31 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/context/</guid>
    <description><![CDATA[Context是 Go 语言中非常有特色的一个特性， 其主要的作用是在 goroutine 中进行上下文的传递，而在传递信息中又包含了 goroutine 的运行控制、上下文信息传递等功能。]]></description>
</item><item>
    <title>Channel源码解析</title>
    <link>https://zoulingbin.github.io/posts/channel/</link>
    <pubDate>Mon, 31 May 2021 12:38:16 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/channel/</guid>
    <description><![CDATA[]]></description>
</item></channel>
</rss>
