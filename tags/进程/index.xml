<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程 on zoulingbin</title>
    <link>https://zoulingbin.github.io/tags/%E8%BF%9B%E7%A8%8B/</link>
    <description>Recent content in 进程 on zoulingbin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 21:37:12 +0800</lastBuildDate>
    
	<atom:link href="https://zoulingbin.github.io/tags/%E8%BF%9B%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>线程与进程</title>
      <link>https://zoulingbin.github.io/post/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Tue, 08 Dec 2020 21:37:12 +0800</pubDate>
      
      <guid>https://zoulingbin.github.io/post/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</guid>
      <description>进程 进程（Process）: 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。 在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。
线程 线程（thread）： 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。
进程与线程的区别  线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位； 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线； 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见； 调度和切换：线程上下文切换比进程上下文切换要快得多； 进程开销大，线程开销小 线程天生的共享内存空间，线程间的通信更简单，避免了进程IPC引入新的复杂度。  进程间通信 管道通信 消息队列通信 共享内存通信 套接字通信 信号 </description>
    </item>
    
  </channel>
</rss>