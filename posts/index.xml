<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 邹灵彬的博客</title>
        <link>https://zoulingbin.github.io/posts/</link>
        <description>All Posts | 邹灵彬的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 12 Aug 2021 00:07:11 &#43;0800</lastBuildDate><atom:link href="https://zoulingbin.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Kong使用笔记</title>
    <link>https://zoulingbin.github.io/posts/kong/</link>
    <pubDate>Thu, 12 Aug 2021 00:07:11 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/kong/</guid>
    <description><![CDATA[什么是kong Kong是云原生、高效、可扩展、分布式的微服务抽象层，被称为API网关，或者API中间件。kong通过插件的形式提供负载均衡，身份验证，日志记录，速率限制等功能。
kong术语 Upstream 负载均衡策略，类似nginx的upstream模块。upstream就是一个虚拟的服务，可以用于配置多个target用来实现负载均衡。当部署集群时，一个单独的地址不足以满足的时候，我们可以使用Kong的 upstream来进行设置。
1 2  # 添加upstream curl -i -X POST --url http://localhost:8001/upstreams/ --data &#39;name=test-upstream   Target 目标IP地址/主机名，最终处理请求的backend服务，端口表示后端服务的实例。每个可以有upstream多个target。由于upstream维护target的更改历史记录， 所以无法删除或者修改target，如果要金庸目标，需要发布一个新的targetweight = 0，或者使用DELETE完成相同的操作。
Services 服务实体是上游服务的抽象，服务的主要属性是它的 URL（其中，Kong 应该代理流量），其可以被设置为单个串或通过指定其protocol，host，port 和path。路由是 Kong 的入口点，并定义匹配客户端请求的规则。一旦匹配路由，Kong 就会将请求代理到其关联的服务。 新增service后，kong会自动分配一个id值，该id作为service的唯一标识，可用于后期修改，查看，绑定route，upstream。
1 2  #通过 Admin API 添加 Service curl -i -X POST --url http://localhost:8001/services/ --data &#39;name=example-service&#39; --data &#39;url=http://mockbin.org&#39;   routes 路由实体定义规则以匹配客户端的请求。每个Route与一个Service相关联，一个服务可能有多个相关联的路由，与给定路由匹配的每个请求都将代理到其关联的Service上。 Route可配置的字段有：paths,methods, hosts。 Route和Service的组合提供了一种强大的路由机制，可以在kong中定义细粒度的入口点，从而使基础架构路由到不同的上游服务。
Consumer Consumer对象表示服务的使用者或用户。
Plugin 插件，可以是全局的，绑定到service，route，consumer。插件实体表示将在 HTTP请求/响应生命周期 期间执行的插件配置。它是为在 Kong 后面运行的服务添加功能的，例如身份验证或速率限制。 将插件配置添加到服务时，客户端向该服务发出的每个请求都将运行所述插件。如果某个特定消费者需要将插件调整为不同的值，你可以通过创建一个单独的插件实例，通过 service 和 consumer 字段指定服务和消费者。]]></description>
</item><item>
    <title>net/http标准库</title>
    <link>https://zoulingbin.github.io/posts/nethttp/</link>
    <pubDate>Tue, 03 Aug 2021 00:36:22 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/nethttp/</guid>
    <description><![CDATA[服务端 示例代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  package main import ( &#34;fmt&#34; &#34;log&#34; &#34;net/http&#34; &#34;strings&#34; ) func Hello(w http.ResponseWriter, r *http.Request) { r.ParseForm()	//解析参数，默认不解析 	fmt.Println(r.Form) fmt.Println(&#34;scheme&#34;, r.URL.Scheme) fmt.Println(&#34;path&#34;, r.URL.Path) fmt.Println(r.Form[&#34;url_long&#34;]) for k, v := range r.Form { fmt.Println(&#34;key:&#34;, k) fmt.Println(&#34;val:&#34;, strings.Join(v, &#34;&#34;)) } fmt.Fprintf(w, &#34;hello&#34;)	//输出到客户端 } func main() { http.]]></description>
</item><item>
    <title>WaitGroup的实现</title>
    <link>https://zoulingbin.github.io/posts/waitgroup/</link>
    <pubDate>Sat, 24 Jul 2021 00:36:02 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/waitgroup/</guid>
    <description><![CDATA[WaitGroup的基本用法 WaitGroup提供了三个方法：
1 2 3  func (wg *WaitGroup) Add(delta int) func (wg *WaitGroup) Done() func (wg *WaitGroup) Wait()    Add:用来设置WaitGroup的计数值； Done:用来将WaitGroup的计数值-1，其实就是调用了Add(-1); Wait:调用这个方法的goroutine会一直阻塞，直到WaitGroup的计数值变为0。  ]]></description>
</item><item>
    <title>3.2 多进程编程</title>
    <link>https://zoulingbin.github.io/posts/3-2%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Tue, 29 Jun 2021 17:59:58 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/3-2%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[《Go并发编程实战第二版》阅读笔记]]></description>
</item><item>
    <title>GMP调度</title>
    <link>https://zoulingbin.github.io/posts/gmp%E8%B0%83%E5%BA%A6/</link>
    <pubDate>Tue, 29 Jun 2021 17:56:43 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/gmp%E8%B0%83%E5%BA%A6/</guid>
    <description><![CDATA[gmp调度分析]]></description>
</item><item>
    <title>TCP协议窗口与拥塞控制（留个坑 后面更新）</title>
    <link>https://zoulingbin.github.io/posts/tcp%E5%8D%8F%E8%AE%AE/</link>
    <pubDate>Mon, 28 Jun 2021 16:38:45 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/tcp%E5%8D%8F%E8%AE%AE/</guid>
    <description><![CDATA[前言 关于tcp的其他内容，在下面的reference有提到，本文主要记录个人对于tcp拥塞控制与滑动窗口的理解,与一些相关的面试题。（下面的链接可能包含本文内容）
滑动窗口 留个坑 后面更新
Reference  https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247484005&amp;idx=1&amp;sn=cb07ee1c891a7bdd0af3859543190202&amp;chksm=f98e46cfcef9cfd9feb8b9df043a249eb5f226a927fd6d4065e99e62a645a584005d9921541b&amp;scene=178&amp;cur_album_id=1337204681134751744#rd
https://mp.weixin.qq.com/s?__biz=MzI0ODk2NDIyMQ==&amp;mid=2247491621&amp;idx=1&amp;sn=78a182f89093ef1cc807bdef21cdcb4d&amp;chksm=e99a1537deed9c2169257574c17877933b68fadd061f371c2f53a50e7f640d52f5f1667c895c&amp;scene=21#wechat_redirect]]></description>
</item><item>
    <title>Mutex解析</title>
    <link>https://zoulingbin.github.io/posts/mutex/</link>
    <pubDate>Sat, 05 Jun 2021 15:27:17 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/mutex/</guid>
    <description><![CDATA[鸟窝大佬的go并发编程阅读记录，从初版mutex到第四版的源码分析]]></description>
</item><item>
    <title>Context源码分析</title>
    <link>https://zoulingbin.github.io/posts/context/</link>
    <pubDate>Tue, 01 Jun 2021 15:08:31 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/context/</guid>
    <description><![CDATA[Context是 Go 语言中非常有特色的一个特性， 其主要的作用是在 goroutine 中进行上下文的传递，而在传递信息中又包含了 goroutine 的运行控制、上下文信息传递等功能。]]></description>
</item><item>
    <title>Channel源码解析</title>
    <link>https://zoulingbin.github.io/posts/channel/</link>
    <pubDate>Mon, 31 May 2021 12:38:16 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zoulingbin.github.io/posts/channel/</guid>
    <description><![CDATA[]]></description>
</item></channel>
</rss>
